using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.Azure.Documents.Client;
using Microsoft.Azure.Documents;
using System.Collections.Generic;

namespace #YOURNAMESPACE#
{
    public class Product
    {
        public string id { get; set; }
        public int productNumber { get; set; }
        public string category { get; set; }
        public string productName { get; set; }
        public string description { get; set; }
    }
    
    public static class ProductsApi
    {
        private static string EndpointUrl = System.Environment.GetEnvironmentVariable("EndpointUrl");
        private static string PrimaryKey = System.Environment.GetEnvironmentVariable("PrimaryKey"); 
        private static string DatabaseName = System.Environment.GetEnvironmentVariable("DatabaseName");
        private static string CollectionName = System.Environment.GetEnvironmentVariable("CollectionName");

        private static DocumentClient client = new DocumentClient(new Uri(EndpointUrl), PrimaryKey);

        [FunctionName("GetProducts")]
        public static async Task&lt;Product[]&gt; GetAll(
            [HttpTrigger(AuthorizationLevel.Function, "get", Route = "products")]
            HttpRequest req,
            ILogger log)
        {
            log.LogInformation("GetProducts function processed a request.");

            int count = 0;
            string continuation = string.Empty;
            List&lt;Product&gt; products = new List&lt;Product&gt;();
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse&lt;dynamic&gt; response = await client.ReadDocumentFeedAsync(
                    UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName),
                    new FeedOptions
                    {
                        MaxItemCount = 10,
                        RequestContinuation = continuation
                    });

                // Append the item count
                count += response.Count;

                // Get the continuation so that we know when to stop.
                continuation = response.ResponseContinuation;

                // Loop through documents returned, convert to Product and add to list
                foreach (var document in response)
                {
                    products.Add((Product)document);
                }

            } while (!string.IsNullOrEmpty(continuation));

            log.LogInformation($"Found {count} products.");

            return products.ToArray();
        }

        [FunctionName("GetProduct")]
        public static async Task&lt;Product&gt; Get(
            [HttpTrigger(AuthorizationLevel.Function, "get", Route = "products/{category}/{id}")] HttpRequest req,
            string category, 
            string id,
            ILogger log)
        {
            log.LogInformation("GetProduct function processed a request.");
            Product product = await client.ReadDocumentAsync&lt;Product&gt;(
                UriFactory.CreateDocumentUri(DatabaseName, CollectionName, id), 
                new RequestOptions { PartitionKey = new PartitionKey(category) });
            return product;
        }

        [FunctionName("CreateProduct")]
        public static async Task&lt;CreatedResult&gt; Create(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = "products")] Product product,
            ILogger log)
        {
            log.LogInformation("CreateProduct function processed a request.");
            await client.CreateDocumentAsync(UriFactory.CreateDocumentCollectionUri(DatabaseName, CollectionName), product);
            return new CreatedResult($"products/{product.id}", product); 
        }

        [FunctionName("DeleteProduct")]
        public static async Task&lt;OkResult&gt; Delete(
            [HttpTrigger(AuthorizationLevel.Function, "delete", Route = "products/{category}/{id}")] HttpRequest req,
            string category,
            string id,
            ILogger log)
        {
            log.LogInformation("CreateProduct function processed a request.");
            Document doc = await client.ReadDocumentAsync(
                UriFactory.CreateDocumentUri(DatabaseName, CollectionName, id),
                new RequestOptions { PartitionKey = new PartitionKey(category) });
            await client.DeleteDocumentAsync(doc.SelfLink,
                new RequestOptions { PartitionKey = new PartitionKey(category) });
            return new OkResult();
        }
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// ALTERNATIVE 2, WITH COSMOS BINDINGS /////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////



using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.Azure.Documents.Client;

namespace #YOURNAMESPACE#
{
    public static class ProductsApi
    {
		private static string EndpointUrl = System.Environment.GetEnvironmentVariable("EndpointUrl");
        private static string PrimaryKey = System.Environment.GetEnvironmentVariable("PrimaryKey"); 
		private static DocumentClient client = new DocumentClient(new Uri(EndpointUrl), PrimaryKey);

        [FunctionName("GetAllProducts")]
        public static async Task&lt;IActionResult&gt; GetAll([HttpTrigger(AuthorizationLevel.Function, "get", Route = "products")]
    HttpRequest req, [CosmosDB(
            databaseName: "Products",
            collectionName: "Products",
            ConnectionStringSetting = "CosmosDbCnString")] JArray products, ILogger log)
        {
            log.LogDebug("GetProducts function processed a request.");
            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            if (products != null)
            {
                return new OkObjectResult(products);
            }
            else
            {
                return new NotFoundResult();
            }
        }

        [FunctionName("GetProduct")]
        public static async Task&lt;IActionResult&gt; GetProduct([HttpTrigger(AuthorizationLevel.Function, "get", Route = "products/{category}/{id}")]
    HttpRequest req, [CosmosDB(
            databaseName: "Products",
            collectionName: "Products",
            ConnectionStringSetting = "CosmosDbCnString",Id = "{id}",PartitionKey = "{category}")] Product product , ILogger log)
        {
            log.LogDebug("GetProduct function processed a request, path {0}.",req.Path);
            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();

            if (product != null)
            {
                return new OkObjectResult(product);
            }
            else
            {
                return new NotFoundResult();
            }
       
        }

        [FunctionName("SetProduct")]
        public static void SetProduct([HttpTrigger(AuthorizationLevel.Function, "post", Route = "products")]
    HttpRequest req, [CosmosDB(
            databaseName: "Products",
            collectionName: "Products",
            ConnectionStringSetting = "CosmosDbCnString")] out dynamic document, ILogger log)
        {
            log.LogDebug("SetProduct function processed a request.");
            string requestBody = new StreamReader(req.Body).ReadToEnd();
            var product = JsonConvert.DeserializeObject&lt;Product&gt;(requestBody);
            document = product;
        }

        [FunctionName("DeleteProduct")]
        public static async Task&lt;IActionResult&gt; DeleteProduct([HttpTrigger(AuthorizationLevel.Function, "Delete", Route = "products/{category}/{id}")]
    HttpRequest req, ILogger log)
        {
            log.LogInformation("CreateProduct function processed a request.");
            Document doc = await client.ReadDocumentAsync(
                UriFactory.CreateDocumentUri(DatabaseName, CollectionName, id),
                new RequestOptions { PartitionKey = new PartitionKey(category) });
            await client.DeleteDocumentAsync(doc.SelfLink,
                new RequestOptions { PartitionKey = new PartitionKey(category) });
            return new OkResult();
        }
    }
}

